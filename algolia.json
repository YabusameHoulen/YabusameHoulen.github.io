
[
  
  
  {
    "objectID": "1744621200",
    "permalink": "/post/hpc_0/",
    "title": "Speed Up Python",
    
    "content": "\r记录自己的瞎折腾\r先给Python测速\r简单计算一下fibonacci数列的值，使用递归和递归加cache的基础方法\nfrom datetime import datetime def fib(n): if n \u0026lt; 2: result = n else: result = fib(n - 1) + fib(n - 2) return result ## 闭包增加缓存 def cached_fib(): cache = {1: 1, 2: 1} def fibonacci(n): if n not in cache: cache[n] = fibonacci(n - 1) + fibonacci(n - 2) return cache[n] return fibonacci ## 这个就不用试了( def fib_tr(n, ret=0, tmp=1): if n == 0: return ret else: return fib_tr(n-1, ret + tmp, ret) 然后测一下用时多少\nt1 = datetime.now() result1 = fib(35) t2 = datetime.now() f = cached_fib() result2 = f(35) t3 = datetime.now() result3 = f(36) t4 = datetime.now() print(f\u0026#34;the 35th number is {result1}, use time {(t2 - t1).total_seconds()} s\u0026#34;) print(f\u0026#34;the 35th number is {result2}, use time {(t3 - t2).total_seconds()} s\u0026#34;) print(f\u0026#34;the 36th number is {result3}, use time {(t4 - t3).total_seconds()} s\u0026#34;) the 35th number is 9227465, use time 0.842028 s\nthe 35th number is 9227465, use time 1.8e-05 s\nthe 36th number is 14930352, use time 1e-06 s\n闭包加个缓存好像有用了，也许可以使用类、 装饰器（手写或者直接from functools import lru_cache，或者\u0026hellip;\n试用Cxx\r虽然C++完全没学会，在可预见的未来也基本学不会，下面只使用递归的方法做，还不知道怎么加cache\n只使用最简单的版本，不知道怎么正确地进行benchmark，但是大概要比之前的快\u0026hellip;\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;unordered_map\u0026gt; #include \u0026lt;chrono\u0026gt; int fib(int n) { if (n \u0026lt; 2) return n; return fib(n - 1) + fib(n - 2); } // 未使用 int fibTr(int n, int ret = 0, int tmp = 1) { if (n == 0) return ret; else return fibTr(n - 1, ret + tmp, ret); } int main(int argc, char *argv[]) { using std::chrono::duration; using std::chrono::duration_cast; using std::chrono::high_resolution_clock; using std::chrono::milliseconds; int n{35}; auto t1 = high_resolution_clock::now(); auto result = fib(n); auto t2 = high_resolution_clock::now(); auto time_delta = duration_cast\u0026lt;milliseconds\u0026gt;(t2 - t1); std::cout \u0026lt;\u0026lt; \u0026#34;Operation took time (ms): \u0026#34; \u0026lt;\u0026lt; time_delta.count() \u0026lt;\u0026lt; std::endl; } Operation took time (ms): 13\nPython + Cxx\r我想试Python加Cxx的解决方案。 pybind11试用一下：sudo apt intall pybind11-dev\n新建一个requirements.txt, 写入内容：pybind\n在Python环境里(我使用的是miniconda的Base环境)安装一下pip install -r requirements.txt\n创建一个fib_lib.cpp，内容如下：\n#include \u0026lt;pybind11/pybind11.h\u0026gt; namespace py = pybind11; int fib(int n) { if (n \u0026lt; 2) return n; return fib(n - 1) + fib(n - 2); } PYBIND11_MODULE(fib_lib, m){ m.def(\u0026#34;fib\u0026#34;, \u0026amp;fib, \u0026#34;Calculate Fibonacci Numbers\u0026#34;); } 再输入以下神秘代码：（可以在vscode里搞一个Task防止整错了）\nc++ -O3 -Wall -shared -std=c++20 -fPIC $(python3 -m pybind11 --includes) fib_lib.cpp -o fib_lib$(python3-config --extension-suffix) 会生成一个fib_lib.cpython-312-x86_64-linux-gnu.so的动态库文件在当前路径，以上操作都在conda的Base环境内\n在路径下写其它的Python文件就可以用这个动态库了：\nimport datetime import fib_lib if __name__ == \u0026#39;__main__\u0026#39;: n = 35 t1 = datetime.datetime.now() fib = fib_lib.fib(n) t2 = datetime.datetime.now() time_delta = (t2 - t1).total_seconds() * 1000 print(f\u0026#34;{n}th fibonacci number {fib}\u0026#34;) print(f\u0026#34;Operation took aproximately {time_delta} ms\u0026#34;) 35th fibonacci number 9227465\nOperation took aproximately 12.209 ms\n为啥比上面直接整Cxx快捏 ~(￣▽￣)~*\n总之调用成功了，最原始递归计算Fibonacci的用时从 0.842028 s → 12.209 ms\nJulia 孔乙己来喽\r上述步骤好像步骤比较繁琐，我对Julia比较熟悉，进行一个Julia的用：\n## fibonacci 的 四种写法 fib1(n::Integer) = n \u0026lt; 3 ? 1 : fib(n-1) + fib(n-2) fib2 = let cache = Dict{Int, Int}() function (n::Int) if !haskey(cache, n) cache[n] = n \u0026lt; 3 ? n : fib2(n - 1) + fib2(n - 2) end return cache[n] end end fib3(n::Integer) = (BigInt.([1 1; 1 0])^n)[2] fib4(n::Integer) = fib4(Val) fib4(::Val{N}) = N \u0026lt; 3 ? 1 : fib4(Val{N-1}) + fib4(Val{n-2}) ### 测测速度，输出放字符串里了，直方图删掉... using BenchmarkTools @benchmark fib1(35) \u0026#34;\u0026#34;\u0026#34; 直接递归 BenchmarkTools.Trial: 244 samples with 1 evaluation per sample. Range (min … max): 19.783 ms … 22.563 ms ┊ GC (min … max): 0.00% … 0.00% Time (median): 20.528 ms ┊ GC (median): 0.00% Time (mean ± σ): 20.550 ms ± 264.387 μs ┊ GC (mean ± σ): 0.00% ± 0.00% 19.8 ms Histogram: frequency by time 21.6 ms \u0026lt; Memory estimate: 0 bytes, allocs estimate: 0. \u0026#34;\u0026#34;\u0026#34; @benchmark fib2(35) \u0026#34;\u0026#34;\u0026#34; 带点cache BenchmarkTools.Trial: 10000 samples with 998 evaluations per sample. Range (min … max): 23.447 ns … 2.179 μs ┊ GC (min … max): 0.00% … 98.11% Time (median): 25.852 ns ┊ GC (median): 0.00% Time (mean ± σ): 27.210 ns ± 31.430 ns ┊ GC (mean ± σ): 3.15% ± 3.81% 23.4 ns Histogram: frequency by time 32.8 ns \u0026lt; Memory estimate: 16 bytes, allocs estimate: 1. \u0026#34;\u0026#34;\u0026#34; @benchmark fib3(35) \u0026#34;\u0026#34;\u0026#34; 不GC的时候够了 BenchmarkTools.Trial: 10000 samples with 1 evaluation per sample. Range (min … max): 11.200 μs … 69.002 ms ┊ GC (min … max): 0.00% … 49.65% Time (median): 12.200 μs ┊ GC (median): 0.00% Time (mean ± σ): 20.620 μs ± 689.902 μs ┊ GC (mean ± σ): 16.61% ± 0.50% 11.2 μs Histogram: log(frequency) by time 34.6 μs \u0026lt; Memory estimate: 11.38 KiB, allocs estimate: 581. \u0026#34;\u0026#34;\u0026#34; @benchmark fib4(35) \u0026#34;\u0026#34;\u0026#34; 这个靠编译就弄好了，快到测不出速度... BenchmarkTools.Trial: 10000 samples with 1000 evaluations per sample. Range (min … max): 1.500 ns … 27.500 ns ┊ GC (min … max): 0.00% … 0.00% Time (median): 1.600 ns ┊ GC (median): 0.00% Time (mean ± σ): 1.604 ns ± 0.339 ns ┊ GC (mean ± σ): 0.00% ± 0.00% 1.5 ns Histogram: frequency by time 1.7 ns \u0026lt; Memory estimate: 0 bytes, allocs estimate: 0. \u0026#34;\u0026#34;\u0026#34; ",
    
    "date": "2025-04-13 15:00:00",
    "updated": "2025-04-13 15:00:00"
  }
  
  , 
  {
    "objectID": "1743530400",
    "permalink": "/post/hello/",
    "title": "Hello World",
    
    "content": "💘 博麗 霊夢 💘\nMarkdown Basic Functionality\r标题\rH1\rH2\rH3\rH4\rH5\rH6\r强调\rEmphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\n列表\rDefinition List (dl)\rOrdered List (ol)\rList Item 1 List Item 2 List Item 3 Unordered List (ul)\rList Item 1 List Item 2 List Item 3 段落\rLorem ipsum dolor sit amet, test link consectetur adipiscing elit. Strong text pellentesque ligula commodo viverra vehicula. Italic text at ullamcorper enim. Morbi a euismod nibh. Underline text non elit nisl. Deleted text tristique, sem id condimentum tempus, metus lectus venenatis mauris, sit amet semper lorem felis a eros. Fusce egestas nibh at sagittis auctor. Sed ultricies ac arcu quis molestie. Donec dapibus nunc in nibh egestas, vitae volutpat sem iaculis. Curabitur sem tellus, elementum nec quam id, fermentum laoreet mi. Ut mollis ullamcorper turpis, vitae facilisis velit ultricies sit amet. Etiam laoreet dui odio, id tempus justo tincidunt id. Phasellus scelerisque nunc sed nunc ultricies accumsan.\nInterdum et malesuada fames ac ante ipsum primis in faucibus. Sed erat diam, blandit eget felis aliquam, rhoncus varius urna. Donec tellus sapien, sodales eget ante vitae, feugiat ullamcorper urna. Praesent auctor dui vitae dapibus eleifend. Proin viverra mollis neque, ut ullamcorper elit posuere eget.\nThis is a very long line that will still be quoted properly when it wraps. Oh boy let\u0026rsquo;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.\nMaecenas ornare arcu at mi suscipit, non molestie tortor ultrices. Aenean convallis, diam et congue ultricies, erat magna tincidunt orci, pulvinar posuere mi sapien ac magna. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Praesent vitae placerat mauris. Nullam laoreet ante posuere tortor blandit auctor. Sed id ligula volutpat leo consequat placerat. Mauris fermentum dolor sed augue malesuada sollicitudin. Vivamus ultrices nunc felis, quis viverra orci eleifend ut. Donec et quam id urna cursus posuere. Donec elementum scelerisque laoreet.\n表格\rTable Header 1 Table Header 2 Table Header 3 Division 1 Division 2 Division 3 Division 1 Division 2 Division 3 Division 1 Division 2 Division 3 Markdown Less Pretty Still renders nicely 1 2 3 其他元素 - abbr, acronym, sub, sup, kbd, etc.\rLorem superscript dolor subscript amet, consectetuer adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. cite. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus. Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. NBA Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus. AVE. Use Crtl + C to stop.\n图片\r分隔线\r代码块\rLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\u0026#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. function hello_world() println(\u0026#34;this is a hello world\u0026#34;) end 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 #[derive(Debug)] pub enum State { Start, Transient, Closed, } impl From\u0026lt;\u0026amp;\u0026#39;a str\u0026gt; for State { fn from(s: \u0026amp;\u0026#39;a str) -\u0026gt; Self { match s { \u0026#34;start\u0026#34; =\u0026gt; State::Start, \u0026#34;closed\u0026#34; =\u0026gt; State::Closed, _ =\u0026gt; unreachable!(), } } } #[derive(Debug)] pub enum State { Start, Transient, Closed, } impl From\u0026lt;\u0026amp;\u0026#39;a str\u0026gt; for State { fn from(s: \u0026amp;\u0026#39;a str) -\u0026gt; Self { match s { \u0026#34;start\u0026#34; =\u0026gt; State::Start, \u0026#34;closed\u0026#34; =\u0026gt; State::Closed, _ =\u0026gt; unreachable!(), } } } @requires_authorization def somefunc(param1=\u0026#39;\u0026#39;, param2=0): r\u0026#39;\u0026#39;\u0026#39;A docstring\u0026#39;\u0026#39;\u0026#39; if param1 \u0026gt; param2: # interesting print \u0026#39;Gre\\\u0026#39;ater\u0026#39; return (param2 - param1 + 1 + 0b10l) or None class SomeClass: pass \u0026gt;\u0026gt;\u0026gt; message = \u0026#39;\u0026#39;\u0026#39;interpreter ... prompt\u0026#39;\u0026#39;\u0026#39; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { width: 500px; } \u0026lt;/style\u0026gt; \u0026lt;script type=\u0026#34;application/javascript\u0026#34;\u0026gt; function $init() { return true; } \u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p checked class=\u0026#34;title\u0026#34; id=\u0026#34;title\u0026#34;\u0026gt;Title\u0026lt;/p\u0026gt; \u0026lt;!-- here goes the rest of the page --\u0026gt; \u0026lt;/body\u0026gt; function $initHighlight(block, cls) { try { if (cls.search(/\\bno\\-highlight\\b/) != -1) return process(block, true, 0x0F) + ` class=\u0026#34;${cls}\u0026#34;`; } catch (e) { /* handle exception */ } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { if (checkCondition(classes[i]) === undefined) console.log(\u0026#39;undefined\u0026#39;); } return ( \u0026lt;div\u0026gt; \u0026lt;web-component\u0026gt;{block}\u0026lt;/web-component\u0026gt; \u0026lt;/div\u0026gt; ) } export $initHighlight; #include \u0026lt;iostream\u0026gt; int main(int argc, char *argv[]) { /* An annoying \u0026#34;Hello World\u0026#34; example */ for (auto i = 0; i \u0026lt; 0xFFFF; i++) cout \u0026lt;\u0026lt; \u0026#34;Hello, World!\u0026#34; \u0026lt;\u0026lt; endl; char c = \u0026#39;\\n\u0026#39;; unordered_map \u0026lt;string, vector\u0026lt;string\u0026gt; \u0026gt; m; m[\u0026#34;key\u0026#34;] = \u0026#34;\\\\\\\\\u0026#34;; // this is an error return -2e3 + 12l; } # Makefile BUILDDIR = _build EXTRAS ?= $(BUILDDIR)/extras .PHONY: main clean main: @echo \u0026#34;Building main facility...\u0026#34; build_main $(BUILDDIR) clean: rm -rf $(BUILDDIR)/* package main import \u0026#34;fmt\u0026#34; func main() { ch := make(chan float64) ch \u0026lt;- 1.0e10 // magic number x, ok := \u0026lt;- ch defer fmt.Println(`exitting now\\`) go println(len(\u0026#34;hello world!\u0026#34;)) return } #!/bin/bash ###### CONFIG ACCEPTED_HOSTS=\u0026#34;/root/.hag_accepted.conf\u0026#34; BE_VERBOSE=false if [ \u0026#34;$UID\u0026#34; -ne 0 ] then echo \u0026#34;Superuser rights required\u0026#34; exit 2 fi genApacheConf(){ echo -e \u0026#34;# Host ${HOME_DIR}$1/$2 :\u0026#34; } 数学公式\r$$\rT = \\begin{pmatrix}\r1 \u0026 0 \u0026 0 \\\\\r0 \u0026 2 \u0026 0 \\\\\r0 \u0026 0 \u0026 3\r\\end{pmatrix},\r$$ 求 $V$ 的一组标准正交基（用 $\\alpha_1, \\alpha_2, \\alpha_3$ 的线性组合）。\n解: 对 $(T, I)$ 作合同变换，将 $T$ 化为单位矩阵 $I$:\n$$\r\\begin{bmatrix}\r1 \u0026 0 \u0026 0 \\\\\r0 \u0026 2 \u0026 0 \\\\\r0 \u0026 0 \u0026 3\r\\end{bmatrix} \\rightarrow \\cdots \\rightarrow \\begin{bmatrix}\r1 \u0026 0 \u0026 0 \\\\\r0 \u0026 1 \u0026 0 \\\\\r0 \u0026 0 \u0026 1\r\\end{bmatrix}\r$$ 流程图\rsequenceDiagram\rparticipant 客户端\rparticipant 代理对象\rparticipant 代理处理器\rparticipant 目标对象\r客户端-\u003e\u003e代理对象:调用方法\r代理对象-\u003e\u003e代理处理器:转发代理处理器\nInvoke()方法\r代理处理器-\u003e\u003e目标对象:判断Method\n调用目标对象的方法\r目标对象-\u003e\u003e代理处理器:返回结果\r代理处理器-\u003e\u003e代理对象:返回结果\r代理对象-\u003e\u003e客户端:返回结果\rgraph LR\rc1[Client1\nSocket]--客户端发出连接--\u003ess[ServerSocket]\rc2[Client2\nSocket]--客户端发出连接--\u003ess[ServerSocket]\rss--服务器接受请求并创建新的Socket--\u003es1[为Client1创\n建的Socket]\rss--服务器接受请求并创建新的Socket--\u003es2[为Client2创\n建的Socket]\rc1--两个Socket间建立专线连接--\u003es1\rc2--两个Socket间建立专线连接--\u003es2\r卡片\r",
    
    "date": "2025-04-01 11:00:00",
    "updated": "2025-04-01 11:00:00"
  }
  
]