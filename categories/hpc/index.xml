<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HPC on 11-D Space</title>
    <link>https://yabusamehoulen.github.io/categories/hpc/</link>
    <description>Recent content from 11-D Space</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    
    <managingEditor>xxx@example.com (Yabusame Houlen)</managingEditor>
    <webMaster>xxx@example.com (Yabusame Houlen)</webMaster>
    
    <copyright>本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</copyright>
    
    <lastBuildDate>Thu, 24 Apr 2025 15:00:00 -1800</lastBuildDate>
    
    
    <atom:link href="https://yabusamehoulen.github.io/categories/hpc/index.xml" rel="self" type="application/rss&#43;xml" />
    

    
    

    <item>
      <title>Write Fast Julia Code</title>
      <link>https://yabusamehoulen.github.io/post/hpc_1/</link>
      <pubDate>Thu, 24 Apr 2025 02:00:00 -1400</pubDate>
      <author>xxx@example.com (Yabusame Houlen)</author>
      <guid>https://yabusamehoulen.github.io/post/hpc_1/</guid>
      <description>
        <![CDATA[<h1>Write Fast Julia Code</h1><p>作者：Yabusame Houlen（xxx@example.com）</p>
        
          <h1 id="尝试整合julia代码的优化方法">
<a class="header-anchor" href="#%e5%b0%9d%e8%af%95%e6%95%b4%e5%90%88julia%e4%bb%a3%e7%a0%81%e7%9a%84%e4%bc%98%e5%8c%96%e6%96%b9%e6%b3%95"></a>
尝试整合Julia代码的优化方法
</h1><h2 id="不应该优化所有代码">
<a class="header-anchor" href="#%e4%b8%8d%e5%ba%94%e8%af%a5%e4%bc%98%e5%8c%96%e6%89%80%e6%9c%89%e4%bb%a3%e7%a0%81"></a>
不应该优化所有代码
</h2><p><code>Profiling</code>只需要测代码中较慢的函数，一般使用<code>BenchmarkTools.jl</code>中的宏，在硬件相同的情况下测试&hellip;</p>
        
        <hr><p>本文2025-04-24首发于<a href='https://yabusamehoulen.github.io/'>11-D Space</a>，最后修改于2025-04-24</p>]]>
      </description>
      
        <category>HPC</category>
      
    </item>
    
    

    <item>
      <title>Speed Up Python</title>
      <link>https://yabusamehoulen.github.io/post/hpc_0/</link>
      <pubDate>Sun, 13 Apr 2025 15:00:00 -1800</pubDate>
      <author>xxx@example.com (Yabusame Houlen)</author>
      <guid>https://yabusamehoulen.github.io/post/hpc_0/</guid>
      <description>
        <![CDATA[<h1>Speed Up Python</h1><p>作者：Yabusame Houlen（xxx@example.com）</p>
        
          <h1 id="记录自己的瞎折腾">
<a class="header-anchor" href="#%e8%ae%b0%e5%bd%95%e8%87%aa%e5%b7%b1%e7%9a%84%e7%9e%8e%e6%8a%98%e8%85%be"></a>
记录自己的瞎折腾
</h1><h2 id="先给python测速">
<a class="header-anchor" href="#%e5%85%88%e7%bb%99python%e6%b5%8b%e9%80%9f"></a>
先给Python测速
</h2><p>简单计算一下fibonacci数列的值，使用递归和递归加cache的基础方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 闭包增加缓存</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">cached_fib</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">cache</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">n</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">cache</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cache</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fibonacci</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 这个就不用试了(</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fib_tr</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">ret</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">tmp</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ret</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">fib_tr</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">ret</span> <span class="o">+</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>
</span></span></code></pre></div><p>然后测一下用时多少</p>
        
        <hr><p>本文2025-04-13首发于<a href='https://yabusamehoulen.github.io/'>11-D Space</a>，最后修改于2025-04-13</p>]]>
      </description>
      
        <category>HPC</category>
      
    </item>
    
  </channel>
</rss>
